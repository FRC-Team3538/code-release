package com.robojackets.constants;

import static edu.wpi.first.units.Units.MetersPerSecond;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.robojackets.ctre.SwerveDrivetrainConstants;
import com.robojackets.ctre.SwerveModule.ClosedLoopOutputType;
import com.robojackets.ctre.SwerveModuleConstants;
import com.robojackets.ctre.SwerveModuleConstants.SteerFeedbackType;
import com.robojackets.ctre.SwerveModuleConstantsFactory;
import edu.wpi.first.math.util.Units;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class CompTunerConstants extends TunerConstants {

  public CompTunerConstants() {
    DrivetrainConstants =
        new SwerveDrivetrainConstants().withPigeon2Id(kPigeonId).withCANbusName(kCANbusName);
    ModuleConstants = new SwerveModuleConstants[] {FrontLeft, FrontRight, BackLeft, BackRight};

    MaxVelocity = MetersPerSecond.of(kSpeedAt12VoltsMps);
  }

  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerRequestType control request with the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
  //   private final Slot0Configs steerGains =
  //       new Slot0Configs()
  //           .withKP(68.686)
  //           .withKI(0)
  //           .withKD(5.14)
  //           .withKS(0)
  //           .withKV(2.4673)
  //           .withKA(0.13855);
  private final Slot0Configs steerGains =
      new Slot0Configs().withKP(100).withKI(0).withKD(0.5).withKS(0).withKV(0).withKA(0);
  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
  private final Slot0Configs driveGains =
      new Slot0Configs()
          .withKP(0.4)
          .withKI(0)
          .withKD(0)
          .withKS(0.19344)
          .withKV(0.12564)
          .withKA(0.016958);

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  private final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  private final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  private final double kSlipCurrentA = 120.0;

  // Theoretical free speed (m/s) at 12v applied output;
  // This needs to be tuned to your individual robot
  public final double kSpeedAt12VoltsMps = 5.21;

  // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
  // This may need to be tuned to your individual robot
  private final double kCoupleRatio = 3.125;

  private final double kDriveGearRatio = 5.3571428571;
  private final double kSteerGearRatio = 18.75;
  private final double kWheelRadiusInches = 1.97825;

  private final boolean kSteerMotorReversed = true;
  private final boolean kInvertLeftSide = false;
  private final boolean kInvertRightSide = true;

  private final String kCANbusName = "3538_Robot";
  private final int kPigeonId = 30;

  // These are only used for simulation
  private final double kSteerInertia = 0.00001;
  private final double kDriveInertia = 0.001;
  // Simulated voltage necessary to overcome friction
  private final double kSteerFrictionVoltage = 0.25;
  private final double kDriveFrictionVoltage = 0.25;

  private final SwerveModuleConstantsFactory ConstantCreator =
      new SwerveModuleConstantsFactory()
          .withDriveMotorGearRatio(kDriveGearRatio)
          .withSteerMotorGearRatio(kSteerGearRatio)
          .withWheelRadius(kWheelRadiusInches)
          .withSlipCurrent(kSlipCurrentA)
          .withSteerMotorGains(steerGains)
          .withDriveMotorGains(driveGains)
          .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
          .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
          .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
          .withSteerInertia(kSteerInertia)
          .withDriveInertia(kDriveInertia)
          .withSteerFrictionVoltage(kSteerFrictionVoltage)
          .withDriveFrictionVoltage(kDriveFrictionVoltage)
          .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
          .withCouplingGearRatio(kCoupleRatio)
          .withSteerMotorInverted(kSteerMotorReversed);

  // spotless:off
  /**
   *     *------------------------*
   *     |                        |
   *     |                        |
   *     *------------------------*
   *     | X                    X |
   *     |                        |
   *     |                        |
   *     |            C           |
   *     |            D           |
   *     |                        |
   *     |                        |
   *     |                        |
   *     | X                    X |
   *     *------------------------*
   * 
   */
  // spotless:on

  // 16.75 front to back (wheel center-center)
  // 16.855 side to side
  // 2.625 offset from rear 2x1

  // frame: 27.125 by 22"

  // ----26x26---- drive base w/ 5" intake on front
  // (drivebase center is 2.625" behind center of 31x26 chassis)
  // Therefore, we need to bias module positions backward
  // so that the center of rotation is correct.

  private final double kTrackWidth = 16.855;

  private final double kWheelBase = 16.75;
  private final double kChassisXOffset = -2.6875; // todo

  // Front Left
  private final int kFrontLeftDriveMotorId = 0;
  private final int kFrontLeftSteerMotorId = 4;
  private final int kFrontLeftEncoderId = 20;
  private final double kFrontLeftEncoderOffset = 0.040283203125;

  private final double kFrontLeftXPosInches = kWheelBase / 2 + kChassisXOffset;
  private final double kFrontLeftYPosInches = kTrackWidth / 2;

  // Front Right
  private final int kFrontRightDriveMotorId = 1;
  private final int kFrontRightSteerMotorId = 5;
  private final int kFrontRightEncoderId = 21;
  private final double kFrontRightEncoderOffset = -0.265380859375;

  private final double kFrontRightXPosInches = kWheelBase / 2 + kChassisXOffset;
  private final double kFrontRightYPosInches = -kTrackWidth / 2;

  // Back Left
  private final int kBackLeftDriveMotorId = 2;
  private final int kBackLeftSteerMotorId = 6;
  private final int kBackLeftEncoderId = 22;
  private final double kBackLeftEncoderOffset = 0.31787109375;

  private final double kBackLeftXPosInches = -kWheelBase / 2 + kChassisXOffset;
  private final double kBackLeftYPosInches = kTrackWidth / 2;

  // Back Right
  private final int kBackRightDriveMotorId = 3;
  private final int kBackRightSteerMotorId = 7;
  private final int kBackRightEncoderId = 23;
  private final double kBackRightEncoderOffset = 0.361328125;

  private final double kBackRightXPosInches = -kWheelBase / 2 + kChassisXOffset;
  private final double kBackRightYPosInches = -kTrackWidth / 2;

  private final SwerveModuleConstants FrontLeft =
      ConstantCreator.createModuleConstants(
          kFrontLeftSteerMotorId,
          kFrontLeftDriveMotorId,
          kFrontLeftEncoderId,
          kFrontLeftEncoderOffset,
          Units.inchesToMeters(kFrontLeftXPosInches),
          Units.inchesToMeters(kFrontLeftYPosInches),
          kInvertLeftSide);
  private final SwerveModuleConstants FrontRight =
      ConstantCreator.createModuleConstants(
          kFrontRightSteerMotorId,
          kFrontRightDriveMotorId,
          kFrontRightEncoderId,
          kFrontRightEncoderOffset,
          Units.inchesToMeters(kFrontRightXPosInches),
          Units.inchesToMeters(kFrontRightYPosInches),
          kInvertRightSide);
  private final SwerveModuleConstants BackLeft =
      ConstantCreator.createModuleConstants(
          kBackLeftSteerMotorId,
          kBackLeftDriveMotorId,
          kBackLeftEncoderId,
          kBackLeftEncoderOffset,
          Units.inchesToMeters(kBackLeftXPosInches),
          Units.inchesToMeters(kBackLeftYPosInches),
          kInvertLeftSide);
  private final SwerveModuleConstants BackRight =
      ConstantCreator.createModuleConstants(
          kBackRightSteerMotorId,
          kBackRightDriveMotorId,
          kBackRightEncoderId,
          kBackRightEncoderOffset,
          Units.inchesToMeters(kBackRightXPosInches),
          Units.inchesToMeters(kBackRightYPosInches),
          kInvertRightSide);
}
